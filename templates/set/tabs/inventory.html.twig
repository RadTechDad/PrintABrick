{% import 'macros/blocks.html.twig' as blocks %}
{% import 'macros/elements.html.twig' as elements %}

{% block content %}
    <div class="ui segment vertical">
        {% for label, flashes in app.session.flashbag.all %}
            {% for flash in flashes %}
                {{ elements.flash(label,flash) }}
            {% endfor %}
        {% endfor %}

        {% if inventorySets %}
            <h2 class="ui dividing header">Sets</h2>
            <div class="ui eight column doubling grid sets">
                {% for inventorySet in inventorySets %}
                    {{ blocks.set(inventorySet.set, inventorySet.quantity) }}
                {% endfor %}
            </div>
        {% else %}
            {% if missingCount > 0 %}
                <div class="ui warning icon message">
                    <i class="warning icon"></i>
                    <div class="content">
                        <div class="header">
                            {{ 'set.download.warning.title' | trans }}
                        </div>
                        <p> {{ 'set.download.warning.text' | trans({'%percent%':((1 - missingCount/partCount)*100)|number_format(2, '.', ','), '%total%':partCount, '%missing%': missingCount, '%unique%': missing|length}) | raw | nl2br }}</p>
                    </div>
                </div>
            {% endif %}

            <div class="ui top attached tabular menu submenu">
                <a class="ui item setTab {% if app.session.get('tab') != 'inventory/multicolor' %}active{%  endif %}" data-tab="inventory/unicolor"><i class="grid layout icon"></i> Uni-Color</a>
                <a class="ui item setTab {% if app.session.get('tab') == 'inventory/multicolor' %}active{%  endif %}" data-tab="inventory/multicolor"><i class="list layout icon"></i> Multi-Color</a>
            </div>

            <div class="ui bottom attached tab {% if app.session.get('tab') != 'inventory/multicolor' %}active{%else %}ajax-load{% endif %}"
                 data-tab="inventory/unicolor"
                 data-src="{{ path('set_models', {id: set.id}) }}">
                {% if app.session.get('tab') != 'inventory/multicolor' %}
                    {{ render(path('set_models', {id: set.id})) }}
                {% else %}
                    <div class="ui active centered inline loader"></div>
                {% endif %}
            </div>
            <div class="ui bottom attached tab {% if app.session.get('tab') == 'inventory/multicolor' %}active{%else %}ajax-load{% endif %}"
                 data-tab="inventory/multicolor"
                 data-src="{{ path('set_colors', {id: set.id}) }}">
                {% if app.session.get('tab') == 'inventory/multicolor' %}
                    {{ render(path('set_colors', {id: set.id})) }}
                {% else %}
                    <div class="ui active centered inline loader"></div>
                {% endif %}
            </div>

            {% if missing|length > 0 %}
                <div class="ui vertical segment basic grey">
                    <h2 class="ui dividing header">{{ 'set.inventory.parts' | trans }}</h2>
                    <div class="ui grid doubling ten column row parts">
                        {% for part in missing %}
                            {% if part['part'].parentParts('P')|first %}
                                {{ blocks.brick((part['part'].parentParts('P')|first).parent,part['quantity']) }}
                            {% else %}
                                {{ blocks.brick(part['part'],part['quantity']) }}
                            {% endif %}
                        {% endfor %}
                    </div>

                    <h2 class="ui dividing header">{{ 'set.inventory.alternatives' | trans }}</h2>
                    <div class="ui grid doubling ten column row parts">
                        {% for part in missing %}
                            {% for alternative in part['part'].parentParts('A')|filter(alternative => alternative.parent.model != NULL) %}
                                {{ blocks.brick(alternative.parent, part['quantity'], -1, 'Alternative')}}
                            {% endfor %}

                            {% for alternative in part['part'].parentParts('M')|filter(alternative => alternative.parent.model != NULL) %}
                                {{ blocks.brick(alternative.parent, part['quantity'], -1, 'Mold' )}}
                            {% endfor %}
                        {% endfor %}
                    </div>
                </div>
            {% endif %}
        {% endif %}
    </div>

    <div class="ui segment vertical">
        <p class="ui text right">{{ 'set.rebrickable.credit' | trans | raw }}</p>
    </div>
{% endblock %}